{"version":3,"sources":["components/AddCategory.js","components/helpers/getGift.js","components/GifGridItem.js","components/GifGrid.js","components/hooks/useFetchGifts.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","onChange","target","getGif","category","a","URL","encodeURI","fetch","resp","json","data","gifts","map","img","id","title","url","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifts","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yKAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAErCC,EAFqC,KAEzBC,EAFyB,KAc5C,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIlB,SACI,uBAAOO,KAAK,OACZC,YAAY,iBACZC,MAAOV,EACPW,SAhBe,SAACR,GACpBF,EAAcE,EAAES,OAAOF,a,+BCJlBG,EAAM,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DAEXC,EAFW,iDAEqCC,UAAUH,GAF/C,+DAGEI,MAAMF,GAHR,cAGXG,EAHW,gBAIIA,EAAKC,OAJT,uBAIVC,EAJU,EAIVA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAVzB,kBAYNL,GAZM,4CAAF,sDCDNQ,EAAc,SAAC,GAAuB,IAAtBJ,EAAqB,EAArBA,MAAWC,GAAU,EAAdF,GAAc,EAAVE,KAEpC,OACI,sBAAKI,UAAU,wCAAf,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IACpB,4BAAIA,QCAHQ,EAAU,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECJV,SAACA,GAAc,IAAD,EAEbf,mBAAS,CAC/BsB,KAAM,GACNc,SAAS,IAJ0B,mBAEhCC,EAFgC,KAEzBC,EAFyB,KAiBvC,OATAC,qBAAU,WACNzB,EAAOC,GACFyB,MAAK,SAAAC,GAAI,OAAIH,EAAS,CACnBhB,KAAMmB,EACNL,SAAQ,SAEjB,CAACrB,IAGGsB,EDVuBK,CAAc3B,GAAhCc,EAHuB,EAG7BP,KAAcc,EAHe,EAGfA,QAGpB,OAAQ,qCAEA,6BAAKrB,IAERqB,GAAW,wCACZ,qBAAKJ,UAAU,YAAf,SACKH,EAAOL,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEmBViB,EApCM,WAAK,IAAD,EAEe3C,mBAAS,CAAC,gBAFzB,mBAEd4C,EAFc,KAEF7C,EAFE,KAazB,OACA,qCAIA,oBAAIiC,UAAU,wCAAd,8BACA,cAAC,EAAD,CAAajC,cAAeA,IAC5B,uBAGA,6BAEQ6C,EAAWpB,KAAI,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAASA,SAAUA,GACLA,Y,MCzB1B8B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7835ea11.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n   \r\n    const [inputValue, setInputValue]= useState('')\r\n    const handleInputValue=(e)=>{\r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n\r\n        if (inputValue.trim().length >2) {\r\n            setCategories(cats => [inputValue, ...cats]); //callback que tiene el estado anterior 'cats'\r\n            setInputValue('');\r\n            }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\"\r\n            placeholder=\"Escribe tu gif\"\r\n            value={inputValue}\r\n            onChange={handleInputValue}/>\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes={\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\n\r\nexport const getGif =async (category)=>{\r\n      \r\n    const URL = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=OOlhtWCnqCwM9kPOoAibz9vw0EJ4M7Sv`\r\n    const resp = await fetch(URL);\r\n    const {data} = await resp.json()\r\n    \r\n    const gifts= data.map(img =>{\r\n        return{\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }})\r\n        return gifts\r\n    }","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, id, url }) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__jello\">\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifts } from './hooks/useFetchGifts'\r\nimport { GifGridItem } from './GifGridItem';\r\n//import { getGif } from './helpers/getGift';\r\n\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    //const [Images, setImages] = useState([])\r\n   const {data: images, loading}= useFetchGifts(category)\r\n   \r\n\r\n    return (<>\r\n    \r\n            <h3>{category}</h3>  \r\n            \r\n        {loading && <p>loading</p> /*si es true entonces hace loading*/ }\r\n        <div className=\"card-grid\">\r\n            {images.map(img=>\r\n                <GifGridItem \r\n                key={img.id}\r\n                {...img}/>) /*los tres puntos son el spreds (estado anterior)*/} \r\n        </div> \r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport {getGif} from './../helpers/getGift'\r\n\r\nexport const useFetchGifts = (category) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n\r\n    });\r\n\r\n    useEffect(() => { //Evita que las peticiones se llamen a cada cambio\r\n        getGif(category)\r\n            .then(imgs => setState({\r\n                data: imgs,\r\n                loading:false\r\n            }));\r\n    }, [category])  //[]si no lleva ninguna dependencia se ejecuta una vez\r\n    \r\n\r\n    return state\r\n}\r\n","\r\nimport {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\nconst GifExpertApp = ()=>{\r\n    \r\n    const [categories, setCategories] = useState(['Dragon Ball'])\r\n\r\n   // const handleAdd =() =>{\r\n    //setCategories( [...categories, 'Naruto']) //operador spreed ) //setCategory cambia el estado del use state\r\n        //Mantengo categorias anteriores y agrego una nueva\r\n\r\n        //setCategories(cats=> [...cats, 'Naruto'])\r\n        // Recibe un callback con el estado anterior\r\n    // }\r\n\r\n//El key no puede ser el indice, es para tener referencia del elemnto.\r\nreturn(\r\n<>\r\n\r\n\r\n\r\n<h1 className=\"animate__animated animate__rubberBand\">Buscador de Gifs</h1>\r\n<AddCategory setCategories={setCategories}/>\r\n<hr/>\r\n\r\n\r\n<ol>\r\n    {\r\n        categories.map(category=>(\r\n            <GifGrid category={category}\r\n                     key={category}/>\r\n                    \r\n        ))\r\n    }\r\n\r\n</ol>\r\n</>\r\n)}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './gifExpertApp';\nimport './index.css'\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}